{"ast":null,"code":"import { base64Decode, base64Encode } from '../encoding/base64';\nimport { md5 } from '../encoding/md5';\nimport { LicenseStatus } from '../utils/licenseStatus';\nexport function generateReleaseInfo() {\n  var today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return base64Encode(today.getTime().toString());\n}\nvar expiryReg = /^.*EXPIRY=([0-9]+),.*$/;\nexport function verifyLicense(releaseInfo, encodedLicense) {\n  if (!releaseInfo) {\n    throw new Error('MUI: The release information is missing. Not able to validate license.');\n  }\n\n  if (!encodedLicense) {\n    return LicenseStatus.NotFound;\n  }\n\n  var hash = encodedLicense.substr(0, 32);\n  var encoded = encodedLicense.substr(32);\n\n  if (hash !== md5(encoded)) {\n    return LicenseStatus.Invalid;\n  }\n\n  var clearLicense = base64Decode(encoded);\n  var expiryTimestamp = 0;\n\n  try {\n    expiryTimestamp = parseInt(clearLicense.match(expiryReg)[1], 10);\n\n    if (!expiryTimestamp || Number.isNaN(expiryTimestamp)) {\n      console.error('Error checking license. Expiry timestamp not found or invalid!');\n      return LicenseStatus.Invalid;\n    }\n  } catch (err) {\n    console.error('Error extracting license expiry timestamp.', err);\n    return LicenseStatus.Invalid;\n  }\n\n  var pkgTimestamp = parseInt(base64Decode(releaseInfo), 10);\n\n  if (Number.isNaN(pkgTimestamp)) {\n    throw new Error('MUI: The release information is invalid. Not able to validate license.');\n  }\n\n  if (expiryTimestamp < pkgTimestamp) {\n    return LicenseStatus.Expired;\n  }\n\n  return LicenseStatus.Valid;\n}","map":null,"metadata":{},"sourceType":"module"}