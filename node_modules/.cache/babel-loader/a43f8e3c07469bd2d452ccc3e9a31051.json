{"ast":null,"code":"import React__default, { memo, createElement } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar MONTHS = {\n  0: 'January',\n  1: 'February',\n  2: 'March',\n  3: 'April',\n  4: 'May',\n  5: 'June',\n  6: 'July',\n  7: 'August',\n  8: 'September',\n  9: 'October',\n  10: 'November',\n  11: 'December'\n};\n\nvar getMonthNameFromNumber = function getMonthNameFromNumber(month) {\n  if (month < 0 || month > 11) {\n    throw new Error(\"Invalid month number: \" + month);\n  }\n\n  return MONTHS[month];\n};\n\nvar getDatesOfMonth = function getDatesOfMonth(date) {\n  // generate dates of each week of the month including the residue dates\n  // of the last week of previous month and first week of next month\n  var firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\n  var lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n  var firstDayOfMonthWeekDay = firstDayOfMonth.getDay();\n  var lastDayOfMonthWeekDay = lastDayOfMonth.getDay();\n  var previousMonth = new Date(date.getFullYear(), date.getMonth(), 0);\n  var previousMonthLastDay = new Date(previousMonth.getFullYear(), previousMonth.getMonth() + 1, 0);\n  var nextMonth = new Date(date.getFullYear(), date.getMonth() + 2, 0);\n  var dates = [];\n\n  for (var i = 0; i < firstDayOfMonthWeekDay; i++) {\n    dates.push({\n      d: new Date(previousMonth.getFullYear(), previousMonth.getMonth(), previousMonthLastDay.getDate() - firstDayOfMonthWeekDay + i + 1),\n      active: false\n    });\n  }\n\n  for (var _i = 0; _i < lastDayOfMonth.getDate(); _i++) {\n    dates.push({\n      d: new Date(date.getFullYear(), date.getMonth(), _i + 1),\n      active: true\n    });\n  }\n\n  for (var _i2 = 0; _i2 < 6 - lastDayOfMonthWeekDay; _i2++) {\n    dates.push({\n      d: new Date(nextMonth.getFullYear(), nextMonth.getMonth(), _i2 + 1),\n      active: false\n    });\n  }\n\n  return dates;\n};\n\nvar MonthPicker = function MonthPicker(_ref) {\n  var month = _ref.month,\n      year = _ref.year,\n      nextMonth = _ref.nextMonth,\n      prevMonth = _ref.prevMonth;\n  return React__default.createElement(\"div\", {\n    className: \"sdp--month-picker\"\n  }, React__default.createElement(\"button\", {\n    className: \"sdp--square-btn sdp--square-btn__shadowed\",\n    onClick: prevMonth,\n    \"aria-label\": \"Go to previous month\",\n    type: \"button\"\n  }, React__default.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"24\",\n    height: \"24\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 256 256\"\n  }, React__default.createElement(\"rect\", {\n    width: \"256\",\n    height: \"256\",\n    fill: \"none\"\n  }), React__default.createElement(\"polyline\", {\n    points: \"160 208 80 128 160 48\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }))), React__default.createElement(\"p\", {\n    className: \"sdp--text sdp--month-name\",\n    \"aria-label\": getMonthNameFromNumber(month) + \" \" + year + \" is currently open in Date Picker\",\n    tabIndex: 0\n  }, getMonthNameFromNumber(month), \" \", year), React__default.createElement(\"button\", {\n    className: \"sdp--square-btn sdp--square-btn__shadowed\",\n    onClick: nextMonth,\n    \"aria-label\": \"Go to next month\",\n    type: \"button\"\n  }, React__default.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"24\",\n    height: \"24\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 256 256\"\n  }, React__default.createElement(\"rect\", {\n    width: \"256\",\n    height: \"256\",\n    fill: \"none\"\n  }), React__default.createElement(\"polyline\", {\n    points: \"96 48 176 128 96 208\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }))));\n};\n\nvar dateOptions = {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric'\n};\n\nvar DateButton = function DateButton(_ref) {\n  var date = _ref.date,\n      active = _ref.active,\n      _onClick = _ref.onClick,\n      selected = _ref.selected;\n  return createElement(\"button\", {\n    className: \"sdp--square-btn sdp--date-btn \" + (selected ? 'sdp--date-btn__selected' : '') + \" sdp--text \" + (!active ? 'sdp--text__inactive' : ''),\n    onClick: function onClick() {\n      return _onClick(date);\n    },\n    tabIndex: active ? 0 : -1,\n    \"aria-label\": (selected ? 'Currently selected' : 'Select') + \" \" + date.toLocaleDateString('en-US', dateOptions),\n    type: \"button\"\n  }, date.getDate());\n};\n\nvar DateButton$1 = /*#__PURE__*/memo(DateButton, function (p, n) {\n  return p.date.getDay() === n.date.getDay() && p.active === n.active && p.selected === n.selected;\n});\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = \".sdp{background-color:#fff;border:none;border-radius:.5rem;box-shadow:var(--shadow);padding:.75rem;width:16rem}.sdp--month-name:focus,.sdp--square-btn:focus,.sdp:focus{box-shadow:0 0 0 2px #60a5fab3;outline:none}.sdp--month-name{border:none;border-radius:.5rem;padding:.5rem}.sdp--text{font-family:var(--font);font-weight:500;margin:0}.sdp--text__inactive{color:var(--disabled-color);pointer-events:none}.sdp--square-btn{align-items:center;background-color:#fff;border:none;border-radius:.5rem;cursor:pointer;display:flex;font-family:var(--font);height:1.8rem;justify-content:center;transition:all .2s ease-in-out;width:1.8rem}.sdp--square-btn:focus:hover{box-shadow:none}.sdp--square-btn__shadowed,.sdp--square-btn__shadowed:focus:hover{box-shadow:var(--shadow)}.sdp--date-btn__selected{background-color:var(--theme-color);box-shadow:var(--shadow);color:var(--selected-date-color)}.sdp--date-btn__selected.sdp--square-btn:focus{box-shadow:var(--shadow)}.sdp--month-picker{align-items:center;display:flex;justify-content:space-between}.sdp--dates-grid{display:grid;gap:4px;grid-template-columns:repeat(7,1fr);justify-items:center;margin:.5rem 0 0}.sdp--dates-grid>p.sdp--text{padding:.5rem 0}\";\nstyleInject(css_248z);\nvar _excluded = [\"onChange\", \"selected\", \"minDate\", \"maxDate\", \"className\"];\nvar DatePicker = /*#__PURE__*/React__default.forwardRef(function (_ref, ref) {\n  var onChange = _ref.onChange,\n      _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? new Date() : _ref$selected,\n      _ref$minDate = _ref.minDate,\n      minDate = _ref$minDate === void 0 ? new Date(1900, 0, 1) : _ref$minDate,\n      maxDate = _ref.maxDate,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var minDateVal = minDate.getTime();\n  var maxDateVal = typeof maxDate === 'undefined' ? Number.POSITIVE_INFINITY : maxDate.getTime();\n\n  var _React$useState = React__default.useState(selected),\n      monthDate = _React$useState[0],\n      setMonthDate = _React$useState[1];\n\n  var _React$useState2 = React__default.useState(selected),\n      selectedDate = _React$useState2[0],\n      setSelectedDate = _React$useState2[1];\n\n  var nextMonth = React__default.useCallback(function () {\n    return setMonthDate(function (d) {\n      var m = d.getMonth();\n      var y = d.getFullYear();\n\n      if (m === 11) {\n        return new Date(y + 1, 0);\n      } else {\n        return new Date(y, m + 1);\n      }\n    });\n  }, []);\n  var prevMonth = React__default.useCallback(function () {\n    return setMonthDate(function (d) {\n      var m = d.getMonth();\n      var y = d.getFullYear();\n\n      if (m === 0) {\n        return new Date(y - 1, 11);\n      } else {\n        return new Date(y, m - 1);\n      }\n    });\n  }, []);\n  var setNewSelectedDate = React__default.useCallback(function (date) {\n    setSelectedDate(date);\n    onChange == null ? void 0 : onChange(date);\n  }, [onChange, setSelectedDate]); // TODO: arrow-keys navigation\n\n  return React__default.createElement(\"div\", Object.assign({\n    className: \"sdp \" + (className != null ? className : ''),\n    \"aria-label\": \"Date Picker\",\n    tabIndex: 0,\n    ref: ref\n  }, props), React__default.createElement(MonthPicker, {\n    month: monthDate.getMonth(),\n    year: monthDate.getFullYear(),\n    nextMonth: nextMonth,\n    prevMonth: prevMonth\n  }), React__default.createElement(\"div\", {\n    className: \"sdp--dates-grid\"\n  }, React__default.createElement(\"p\", {\n    className: \"sdp--text sdp--text__inactive\"\n  }, \"Su\"), React__default.createElement(\"p\", {\n    className: \"sdp--text sdp--text__inactive\"\n  }, \"Mo\"), React__default.createElement(\"p\", {\n    className: \"sdp--text sdp--text__inactive\"\n  }, \"Tu\"), React__default.createElement(\"p\", {\n    className: \"sdp--text sdp--text__inactive\"\n  }, \"We\"), React__default.createElement(\"p\", {\n    className: \"sdp--text sdp--text__inactive\"\n  }, \"Th\"), React__default.createElement(\"p\", {\n    className: \"sdp--text sdp--text__inactive\"\n  }, \"Fr\"), React__default.createElement(\"p\", {\n    className: \"sdp--text sdp--text__inactive\"\n  }, \"Sa\"), getDatesOfMonth(monthDate).map(function (_ref2) {\n    var d = _ref2.d,\n        active = _ref2.active;\n    var dVal = d.getTime();\n    return React__default.createElement(DateButton$1, {\n      key: dVal,\n      date: d,\n      active: dVal >= minDateVal && dVal <= maxDateVal && active,\n      selected: selectedDate.toDateString() === d.toDateString(),\n      onClick: setNewSelectedDate\n    });\n  })));\n});\nDatePicker.displayName = 'DatePicker';\nvar css_248z$1 = \".sdp,.stp{--font:inherit,-apple-system,\\\"Segoe UI\\\",Ubuntu,\\\"Helvetica Neue\\\",sans-serif;--shadow:transparent 0px 0px 0px 0px,transparent 0px 0px 0px 0px,rgba(0,0,0,.1) 0px 1px 3px 0px,rgba(0,0,0,.06) 0px 1px 2px 0px;--shadow-md:transparent 0px 0px 0px 0px,transparent 0px 0px 0px 0px,rgba(0,0,0,.1) 0px 4px 6px -1px,rgba(0,0,0,.06) 0px 2px 4px -1px;--theme-color:#60a5fa;--selected-date-color:#fff;--disabled-color:#bdbdbd}\";\nstyleInject(css_248z$1);\n/**\r\n * Custom Option component.\r\n */\n\nvar CustomOption = function CustomOption(_ref) {\n  var selected = _ref.selected,\n      value = _ref.value,\n      label = _ref.label,\n      _onClick = _ref.onClick,\n      disabled = _ref.disabled;\n  var ref = React__default.useRef(null);\n  React__default.useEffect(function () {\n    if (selected) {\n      var _ref$current;\n\n      (_ref$current = ref.current) == null ? void 0 : _ref$current.scrollIntoView();\n    }\n  }, [selected]);\n  return React__default.createElement(\"button\", {\n    ref: ref,\n    className: \"stp--option \" + (selected ? 'stp--option__active' : '') + \" \" + (disabled ? 'stp--option__disabled' : ''),\n    type: \"button\",\n    onClick: function onClick() {\n      return !disabled && _onClick(value);\n    },\n    key: value\n  }, label);\n};\n/**\r\n * A custom select component.\r\n *\r\n */\n\n\nvar CustomSelect = function CustomSelect(_ref) {\n  var value = _ref.value,\n      options = _ref.options,\n      onChange = _ref.onChange,\n      children = _ref.children;\n  var ref = React__default.useRef(null);\n\n  var _React$useState = React__default.useState(false),\n      isOpen = _React$useState[0],\n      setIsOpen = _React$useState[1];\n\n  var openOptionsDropdown = React__default.useCallback(function () {\n    setIsOpen(true);\n  }, []);\n  var closeOptionsDropdown = React__default.useCallback(function () {\n    setIsOpen(false);\n  }, []);\n  var handleOptionSelect = React__default.useCallback(function (v) {\n    onChange(v);\n    closeOptionsDropdown();\n  }, [onChange, closeOptionsDropdown]);\n  React__default.useEffect(function () {\n    if (React__default.Children.toArray(children).some(function (c) {\n      return typeof c !== 'string';\n    })) {\n      throw new Error('time-picker: CustomSelect children must be strings');\n    }\n  }, [children]);\n  React__default.useEffect(function () {\n    var clickListener = function clickListener(e) {\n      var _ref$current;\n\n      if (!((_ref$current = ref.current) != null && _ref$current.contains(e.target))) {\n        closeOptionsDropdown();\n      }\n    };\n\n    document.addEventListener('click', clickListener);\n    return function () {\n      return document.removeEventListener('click', clickListener);\n    };\n  }, [closeOptionsDropdown]);\n  return React__default.createElement(\"div\", {\n    className: \"stp--select__container\"\n  }, React__default.createElement(\"div\", {\n    ref: ref,\n    className: \"stp--select\",\n    tabIndex: 0,\n    onClick: openOptionsDropdown,\n    onFocus: openOptionsDropdown\n  }, value), isOpen && React__default.createElement(\"div\", {\n    className: \"stp--select__dropdown\"\n  }, options.map(function (_ref2) {\n    var _ref2$value = _ref2.value,\n        v = _ref2$value[0],\n        label = _ref2$value[1],\n        disabled = _ref2.disabled;\n    return React__default.createElement(CustomOption, {\n      key: v,\n      selected: v === value,\n      value: v,\n      label: label,\n      onClick: handleOptionSelect,\n      disabled: disabled\n    });\n  })));\n};\n\nvar css_248z$2 = \".stp{border:none;border-radius:.5rem;box-shadow:var(--shadow);display:inline-flex;font-family:var(--font);padding:.5rem}.stp,.stp *{outline:none}.stp:focus,.stp :focus{box-shadow:0 0 0 2px #60a5fab3}.stp>p{display:inline;margin:0 4px}.stp--select{border:none;border-radius:.25rem;display:inline;padding:.1rem .4rem}.stp--select__container{position:relative}.stp--select__dropdown{background-color:#fff;border:none;border-radius:.5rem;box-shadow:var(--shadow);display:flex;flex-direction:column;max-height:30vh;overflow:auto;padding:.4rem;position:absolute;scrollbar-width:none;z-index:2}.stp--select__dropdown::-webkit-scrollbar{display:none}.stp--option,.stp--select{font-family:var(--font);font-size:1rem;font-weight:500}.stp--option__disabled{color:var(--disabled-color);pointer-events:none}.stp--select:hover{cursor:context-menu}.stp--option{background-color:#fff;border:none;border-radius:.25rem;cursor:pointer;margin-top:.25rem;padding:.25rem .4rem;transition:all .1s ease}.stp--option:first-of-type{margin-top:0}.stp--option:hover,.stp--option__active{background-color:var(--theme-color);color:var(--selected-date-color)}.stp--option__active{box-shadow:var(--shadow)}\";\nstyleInject(css_248z$2);\nvar _excluded$1 = [\"onChange\", \"selected\", \"minTime\", \"maxTime\", \"minutesInterval\", \"className\"];\n/**\r\n *\r\n * @param time {Time} The time value\r\n * @param interval {number} The interval between each minute select option\r\n * @returns {Time} Time value rounded to the nearest interval\r\n */\n\nvar alignTime = function alignTime(_ref, interval, lower) {\n  var hours = _ref.hours,\n      minutes = _ref.minutes;\n\n  if (lower === void 0) {\n    lower = true;\n  } // round minutes to nearest interval\n\n\n  if (minutes % interval !== 0) {\n    minutes = lower ? minutes - minutes % interval : minutes + minutes % interval;\n  }\n\n  return {\n    hours: hours,\n    minutes: minutes\n  };\n};\n\nvar isMinuteOptionDisabled = function isMinuteOptionDisabled(selectedTime, maxTime, minTime, i) {\n  return selectedTime.hours > maxTime.hours || selectedTime.hours < minTime.hours || selectedTime.hours === maxTime.hours && i > maxTime.minutes || selectedTime.hours === minTime.hours && i < minTime.minutes;\n}; // sane defaults\n\n\nvar MIN_TIME = {\n  hours: 0,\n  minutes: 0\n};\nvar MAX_TIME = {\n  hours: 23,\n  minutes: 59\n};\nvar MINUTES_INTERVAL = 30;\n/**\r\n * TimePicker React Component\r\n */\n\nvar TimePicker = /*#__PURE__*/React__default.forwardRef(function (_ref2, ref) {\n  var onChange = _ref2.onChange,\n      selected = _ref2.selected,\n      _ref2$minTime = _ref2.minTime,\n      minTime = _ref2$minTime === void 0 ? MIN_TIME : _ref2$minTime,\n      _ref2$maxTime = _ref2.maxTime,\n      maxTime = _ref2$maxTime === void 0 ? MAX_TIME : _ref2$maxTime,\n      _ref2$minutesInterval = _ref2.minutesInterval,\n      minutesInterval = _ref2$minutesInterval === void 0 ? MINUTES_INTERVAL : _ref2$minutesInterval,\n      className = _ref2.className,\n      props = _objectWithoutPropertiesLoose(_ref2, _excluded$1);\n\n  if (typeof minutesInterval !== 'number' && minutesInterval < 1 && Number.isInteger(minutesInterval)) {\n    throw new Error('minutesInterval must be an integer greater than 0');\n  }\n\n  var _React$useState = React__default.useState(function () {\n    if (selected !== undefined) {\n      return alignTime(selected, minutesInterval);\n    }\n\n    var d = new Date();\n    return alignTime({\n      hours: d.getHours(),\n      minutes: d.getMinutes()\n    }, minutesInterval);\n  }),\n      selectedTime = _React$useState[0],\n      setSelectedTime = _React$useState[1];\n\n  var handleMinutesChange = React__default.useCallback(function (v) {\n    setSelectedTime(function (t) {\n      if (t.hours === maxTime.hours && Number(v) > maxTime.minutes) {\n        return alignTime(_extends({}, t, {\n          minutes: maxTime.minutes\n        }), minutesInterval);\n      } else if (t.hours === minTime.hours && Number(v) < minTime.minutes) {\n        return alignTime(_extends({}, t, {\n          minutes: minTime.minutes\n        }), minutesInterval, false);\n      } else {\n        return alignTime(_extends({}, t, {\n          minutes: Number(v)\n        }), minutesInterval);\n      }\n    });\n  }, [minutesInterval, maxTime, minTime]);\n  var handleHoursChange = React__default.useCallback(function (v) {\n    setSelectedTime(function (t) {\n      var h = Number(v);\n\n      if (h === minTime.hours && t.minutes < minTime.minutes) {\n        return alignTime({\n          hours: h,\n          minutes: minTime.minutes\n        }, minutesInterval, false);\n      } else if (h === maxTime.hours && t.minutes > maxTime.minutes) {\n        return alignTime({\n          hours: h,\n          minutes: maxTime.minutes\n        }, minutesInterval);\n      } else {\n        return alignTime(_extends({}, t, {\n          hours: h\n        }), minutesInterval);\n      }\n    });\n  }, [minutesInterval, maxTime, minTime]); // the array of options for the minutes to select from\n\n  var minuteOptions = React__default.useMemo(function () {\n    var options = [];\n\n    for (var i = 0; i < 60; i += minutesInterval) {\n      options.push({\n        value: [i.toString(), i.toString().padStart(2, '0')],\n        disabled: isMinuteOptionDisabled(selectedTime, maxTime, minTime, i)\n      });\n    }\n\n    return options; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [minutesInterval, maxTime, minTime, selectedTime.hours]);\n  var hourOptions = React__default.useMemo(function () {\n    var options = [];\n\n    for (var i = 0; i <= 23; i++) {\n      options.push({\n        value: [i.toString(), i.toString().padStart(2, '0')],\n        disabled: minTime.hours > i || maxTime.hours < i\n      });\n    }\n\n    return options;\n  }, [maxTime, minTime]);\n  React__default.useEffect(function () {\n    onChange == null ? void 0 : onChange(selectedTime);\n  }, [selectedTime, onChange]);\n  React__default.useEffect(function () {\n    var updatedTime = alignTime(selectedTime, minutesInterval);\n    setSelectedTime(updatedTime);\n    onChange == null ? void 0 : onChange(updatedTime); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [minutesInterval]);\n  return React__default.createElement(\"div\", Object.assign({\n    className: \"stp \" + (className != null ? className : '')\n  }, props, {\n    ref: ref\n  }), React__default.createElement(CustomSelect, {\n    className: \"stp--select stp--select__hours\",\n    value: selectedTime.hours.toString().padStart(2, '0'),\n    onChange: handleHoursChange,\n    options: hourOptions\n  }), React__default.createElement(\"p\", null, \":\"), React__default.createElement(CustomSelect, {\n    className: \"stp--select stp--select__minutes\",\n    value: selectedTime.minutes.toString().padStart(2, '0'),\n    onChange: handleMinutesChange,\n    options: minuteOptions\n  }));\n});\nTimePicker.displayName = 'TimePicker';\nexport default DatePicker;\nexport { TimePicker };","map":null,"metadata":{},"sourceType":"module"}